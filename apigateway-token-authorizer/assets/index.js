"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
exports.handler = async (event) => {
    //export const handler = async (event: any, _context: any = {}): Promise<any> => {
    console.log(event);
    const authString = event.authorizationToken;
    console.log(event.authorizationToken);
    if (authString === 'abc123' || authString === 'abc321') {
        return {
            "principalId": "user",
            "policyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Action": "execute-api:Invoke",
                        "Resource": "arn:aws:execute-api:us-east-1:168454997764:7ttq8cl06k/*/*",
                        "Effect": "Allow",
                    }
                ]
            }
        };
    }
    else {
        throw new Error('Unauthorized');
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBSWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6QixPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFVLEVBQUUsRUFBRTtJQUNuQyxrRkFBa0Y7SUFDbEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7SUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN0QyxJQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksVUFBVSxLQUFLLFFBQVEsRUFBRTtRQUNwRCxPQUFPO1lBQ0gsYUFBYSxFQUFFLE1BQU07WUFDckIsZ0JBQWdCLEVBQUU7Z0JBQ2QsU0FBUyxFQUFFLFlBQVk7Z0JBQ3ZCLFdBQVcsRUFBRTtvQkFDVDt3QkFDSSxRQUFRLEVBQUUsb0JBQW9CO3dCQUU5QixVQUFVLEVBQUUsMkRBQTJEO3dCQUN2RSxRQUFRLEVBQUUsT0FBTztxQkFFcEI7aUJBQ0o7YUFDSjtTQUNKLENBQUM7S0FDTDtTQUNJO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUNuQztBQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBBbnlSZWNvcmQgfSBmcm9tIFwiZG5zXCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFuZGxlciA9IHZvaWQgMDtcbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55KSA9PiB7XG4gICAgLy9leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55LCBfY29udGV4dDogYW55ID0ge30pOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcbiAgICBjb25zdCBhdXRoU3RyaW5nID0gZXZlbnQuYXV0aG9yaXphdGlvblRva2VuO1xuICAgIGNvbnNvbGUubG9nKGV2ZW50LmF1dGhvcml6YXRpb25Ub2tlbik7XG4gICAgaWYgKGF1dGhTdHJpbmcgPT09ICdhYmMxMjMnIHx8IGF1dGhTdHJpbmcgPT09ICdhYmMzMjEnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInByaW5jaXBhbElkXCI6IFwidXNlclwiLFxuICAgICAgICAgICAgXCJwb2xpY3lEb2N1bWVudFwiOiB7XG4gICAgICAgICAgICAgICAgXCJWZXJzaW9uXCI6IFwiMjAxMi0xMC0xN1wiLFxuICAgICAgICAgICAgICAgIFwiU3RhdGVtZW50XCI6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJBY3Rpb25cIjogXCJleGVjdXRlLWFwaTpJbnZva2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJSZXNvdXJjZVwiOiBcImFybjphd3M6ZXhlY3V0ZS1hcGk6dXMtZWFzdC0xOjE2ODQ1NDk5Nzc2NDo3dHRxOGNsMDZrLyovKlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJFZmZlY3RcIjogXCJBbGxvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc291cmNlOiBldmVudC5tZXRob2RBcm5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hdXRob3JpemVkJyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCWVN4UlFVRkJMRTlCUVU4c1IwRkJSeXhMUVVGTExFVkJRVVVzUzBGQlZTeEZRVUZITEZWQlFXVXNSVUZCUlN4RlFVRm5RaXhGUVVGRk8wbEJRemxGTEd0R1FVRnJSanRKUVVNNVJTeE5RVUZOTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdTVUZETlVNc1NVRkJTU3hWUVVGVkxFdEJRVXNzVVVGQlVTeEpRVUZKTEZWQlFWVXNTMEZCU3l4UlFVRlJMRVZCUTNSRU8xRkJRMGtzVDBGQlR6dFpRVU5JTEZkQlFWY3NSVUZCUlN4TlFVRk5PMWxCUTI1Q0xHTkJRV01zUlVGQlJUdG5Ra0ZEV2l4UFFVRlBMRVZCUVVVc1dVRkJXVHRuUWtGRGNrSXNVMEZCVXl4RlFVRkZPMjlDUVVOUU8zZENRVU5KTEUxQlFVMHNSVUZCUlN4dlFrRkJiMEk3ZDBKQlF6VkNMRTFCUVUwc1JVRkJSU3hWUVVGVk8zZENRVU5zUWl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExGTkJRVk03Y1VKQlF6VkNPMmxDUVVOS08yRkJRMG83VTBGRFNpeERRVUZCTzB0QlEwbzdVMEZEUkR0UlFVTkpMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdTMEZEYmtNN1FVRkZUQ3hEUVVGRExFTkJRVUVpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbGVIQnZjblFnWTI5dWMzUWdhR0Z1Wkd4bGNpQTlJR0Z6ZVc1aklDaGxkbVZ1ZERvZ1lXNTVJQ3dnWTI5dWRHVjRkRG9nWVc1NUlEMGdlMzBwT2lCUWNtOXRhWE5sUEdGdWVUNGdQVDRnZTF4eVhHNHZMMlY0Y0c5eWRDQmpiMjV6ZENCb1lXNWtiR1Z5SUQwZ1lYTjVibU1nS0dWMlpXNTBPaUJoYm5rc0lGOWpiMjUwWlhoME9pQmhibmtnUFNCN2ZTazZJRkJ5YjIxcGMyVThZVzU1UGlBOVBpQjdYSEpjYmlBZ0lDQmpiMjV6ZENCaGRYUm9VM1J5YVc1bklEMGdaWFpsYm5RdVlYVjBhRzl5YVhwaGRHbHZibFJ2YTJWdU8xeHlYRzRnSUNBZ2FXWWdLR0YxZEdoVGRISnBibWNnUFQwOUlDZGhZbU14TWpNbklIeDhJR0YxZEdoVGRISnBibWNnUFQwOUlDZGhZbU16TWpFbktWeHlYRzRnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlhVzVqYVhCaGJFbGtPaUFuZFhObGNpY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZiR2xqZVVSdlkzVnRaVzUwT2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQldaWEp6YVc5dU9pQW5NakF4TWkweE1DMHhOeWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVGRHRjBaVzFsYm5RNklGdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFRmpkR2x2YmpvZ0oyVjRaV04xZEdVdVlYQnBMa2x1ZG05clpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVZtWm1WamREb2dZWFYwYUZOMGNtbHVaeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVW1WemIzVnlZMlU2SUdWMlpXNTBMbTFsZEdodlpFRnlibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwZ1pXeHpaVnh5WEc0Z0lDQWdlMXh5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVlc1aGRYUm9iM0pwZW1Wa0p5azdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNTlJbDE5Il19